#!/usr/bin/env perl
# vim:ts=4:sw=4:expandtab
# x11vis - an X11 protocol visualizer
# Â© 2011 Michael Stapelberg and contributors (see ../LICENSE)

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use AnyEvent;
use AnyEvent::Socket;
use AnyEvent::Handle;
use JSON::XS;
use Errno qw(EAGAIN);
use FindBin;
use v5.10;

Getopt::Long::Configure('pass_through');

my $marker = undef;
my $result = GetOptions(
    "marker=s" => \$marker
);

if (defined($marker)) {
    say "Setting marker $marker...";
    my $cv = AE::cv;
    my $hdl;
    tcp_connect "unix/", "/tmp/x11vis.sock", sub {
        my ($fh) = @_
            or return $cv->croak("Connecting to x11vis failed (IPC): $!");

        $hdl = AnyEvent::Handle->new(
            fh => $fh,
            on_error => sub {
                my ($hdl, $fatal, $msg) = @_;
                warn "got error $msg\n";
                $hdl->destroy;
            }
        );
        $hdl->push_write(encode_json(
            {
                type => 'marker',
                marker => $marker,
                source => 'cli',
            }
        ) . "\n");
        $hdl->push_read(line => sub {
            my ($hdl, $line) = @_;
            my $json = decode_json($line);
            if (!$json->{ack}) {
                die "Error";
            }
            $cv->send;
        });

    };
    $cv->recv;
    exit 0;
}

#
# Checks if an interceptor is running by checking /tmp/x11vis.sock and starts it
# if necessary.
#
sub start_interceptor {
    my $cv = AE::cv;
    tcp_connect 'unix/', '/tmp/x11vis.sock', sub { $cv->send(!!$_[0]) };
    return if $cv->recv;

    say "Interceptor not started yet, starting it...";
    my $prefix = "$FindBin::RealBin";
    say "Trying $prefix/../lib/x11vis/interceptor/interceptor.pl";
    my $pid;
    if (($pid = fork())) {
        # parent process, continue.
    } elsif (defined($pid)) {
        # child process, close outputs (as they can be loud) and start 
        # interceptor.
        close(STDIN);
        close(STDOUT);
        close(STDERR);
        exec "$prefix/../lib/x11vis/interceptor/interceptor.pl";
    } elsif ($! == EAGAIN) {
# TODO
        say "again!";
    } else {
        say "error forking: $!";
        exit 1;
    }

    my $timeout;
    $timeout = AE::timer 5, 0, sub {
        say "Interceptor failed to start within 5 seconds.";
        exit 1;
    };

    $cv = AE::cv;
    my $t;
    $t = AE::timer 0, 0.125, sub {
        tcp_connect 'unix/', '/tmp/x11vis.sock', sub {
            my ($fh) = @_;
            if ($fh) {
                undef $t;
                undef $timeout;
                $cv->send(1);
                return;
            }
        };
    };

    $cv->recv;
}

exit 0 if @ARGV == 0;

start_interceptor;

my $cmdline = join(' ', @ARGV);
say qq|Interceptor running, now starting "$cmdline"|;
$ENV{DISPLAY} = '127.0.0.1:0';
exec @ARGV;
